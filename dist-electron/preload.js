"use strict";
const electron = require("electron");
const electronAPI = {
  projects: {
    getAll: () => electron.ipcRenderer.invoke("projects:getAll"),
    create: (projectData) => electron.ipcRenderer.invoke("projects:create", projectData),
    update: (id, updates) => electron.ipcRenderer.invoke("projects:update", id, updates),
    delete: (id) => electron.ipcRenderer.invoke("projects:delete", id),
    getRunning: () => electron.ipcRenderer.invoke("projects:getRunning"),
    start: (id) => electron.ipcRenderer.invoke("projects:start", id),
    stop: (id) => electron.ipcRenderer.invoke("projects:stop", id),
    getStatus: (id) => electron.ipcRenderer.invoke("projects:getStatus", id)
  },
  logs: {
    getMemoryLogs: (projectId) => electron.ipcRenderer.invoke("logs:getMemoryLogs", projectId),
    clearAll: () => electron.ipcRenderer.invoke("logs:clearAll"),
    clear: (projectId) => electron.ipcRenderer.invoke("logs:clear", projectId),
    onData: (callback) => {
      electron.ipcRenderer.on("logs:data", (_, data) => callback(data));
    },
    removeAllListeners: () => {
      electron.ipcRenderer.removeAllListeners("logs:data");
    }
  },
  config: {
    get: () => electron.ipcRenderer.invoke("config:get"),
    update: (updates) => electron.ipcRenderer.invoke("config:update", updates),
    reset: () => electron.ipcRenderer.invoke("config:reset")
  },
  dialog: {
    selectFolder: () => electron.ipcRenderer.invoke("dialog:selectFolder")
  },
  system: {
    openFolder: (folderPath) => electron.ipcRenderer.invoke("system:openFolder", folderPath)
  }
};
electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuLy8g5a6a5LmJIEFQSSDnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XHJcbiAgLy8g6aG555uu566h55CGXHJcbiAgcHJvamVjdHM6IHtcclxuICAgIGdldEFsbDogKCkgPT4gUHJvbWlzZTxQcm9qZWN0W10+XHJcbiAgICBjcmVhdGU6IChwcm9qZWN0RGF0YTogQ3JlYXRlUHJvamVjdERhdGEpID0+IFByb21pc2U8UHJvamVjdD5cclxuICAgIHVwZGF0ZTogKGlkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8UHJvamVjdD4pID0+IFByb21pc2U8UHJvamVjdD5cclxuICAgIGRlbGV0ZTogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGdldFJ1bm5pbmc6ICgpID0+IFByb21pc2U8UHJvamVjdFtdPlxyXG4gICAgc3RhcnQ6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgcGlkPzogbnVtYmVyOyBlcnJvcj86IHN0cmluZyB9PlxyXG4gICAgc3RvcDogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGdldFN0YXR1czogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8UHJvamVjdFN0YXR1cz5cclxuICB9XHJcblxyXG4gIC8vIOaXpeW/l+euoeeQhlxyXG4gIGxvZ3M6IHtcclxuICAgIGdldE1lbW9yeUxvZ3M6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gUHJvbWlzZTxMb2dFbnRyeVtdPlxyXG4gICAgY2xlYXJBbGw6ICgpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGNsZWFyOiAocHJvamVjdElkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIG9uRGF0YTogKGNhbGxiYWNrOiAoZGF0YTogeyBwcm9qZWN0SWQ6IHN0cmluZzsgZGF0YTogTG9nRW50cnkgfSkgPT4gdm9pZCkgPT4gdm9pZFxyXG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiAoKSA9PiB2b2lkXHJcbiAgfVxyXG5cclxuICAvLyDphY3nva7nrqHnkIZcclxuICBjb25maWc6IHtcclxuICAgIGdldDogKCkgPT4gUHJvbWlzZTxBcHBDb25maWc+XHJcbiAgICB1cGRhdGU6ICh1cGRhdGVzOiBQYXJ0aWFsPEFwcENvbmZpZz4pID0+IFByb21pc2U8QXBwQ29uZmlnPlxyXG4gICAgcmVzZXQ6ICgpID0+IFByb21pc2U8QXBwQ29uZmlnPlxyXG4gIH1cclxuXHJcbiAgLy8g57O757uf5a+56K+d5qGGXHJcbiAgZGlhbG9nOiB7XHJcbiAgICBzZWxlY3RGb2xkZXI6ICgpID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbD5cclxuICB9XHJcblxyXG4gIC8vIOezu+e7n+aTjeS9nFxyXG4gIHN5c3RlbToge1xyXG4gICAgb3BlbkZvbGRlcjogKGZvbGRlclBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+XHJcbiAgfVxyXG59XHJcblxyXG4vLyDmlbDmja7nsbvlnovlrprkuYlcclxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0IHtcclxuICBpZDogc3RyaW5nXHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgcGFja2FnZU1hbmFnZXI6ICducG0nIHwgJ3BucG0nIHwgJ3lhcm4nXHJcbiAgc3RhcnRDb21tYW5kOiBzdHJpbmdcclxuICBzdGF0dXM6ICdzdG9wcGVkJyB8ICdydW5uaW5nJyB8ICdlcnJvcidcclxuICBwb3J0PzogbnVtYmVyXHJcbiAgcGlkPzogbnVtYmVyXHJcbiAgdXJsPzogc3RyaW5nXHJcbiAgY3JlYXRlZEF0OiBzdHJpbmdcclxuICB1cGRhdGVkQXQ6IHN0cmluZ1xyXG4gIGF1dG9SZWZyZXNoTG9ncz86IGJvb2xlYW4gLy8g5re75Yqg6Ieq5Yqo5Yi35paw5pel5b+X5a2X5q61XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlUHJvamVjdERhdGEge1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIHBhdGg6IHN0cmluZ1xyXG4gIHBhY2thZ2VNYW5hZ2VyOiAnbnBtJyB8ICdwbnBtJyB8ICd5YXJuJ1xyXG4gIHN0YXJ0Q29tbWFuZD86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcclxuICB0aW1lc3RhbXA6IHN0cmluZ1xyXG4gIGxldmVsOiAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwQ29uZmlnIHtcclxuICB0aGVtZTogJ2xpZ2h0JyB8ICdkYXJrJyB8ICdzeXN0ZW0nXHJcbiAgYXV0b1N0YXJ0OiBib29sZWFuXHJcbiAgbWluaW1pemVUb1RyYXk6IGJvb2xlYW5cclxuICBzaG93Tm90aWZpY2F0aW9uczogYm9vbGVhblxyXG4gIGRlZmF1bHRQYWNrYWdlTWFuYWdlcjogJ25wbScgfCAncG5wbScgfCAneWFybidcclxuICBtYXhDb25jdXJyZW50UHJvamVjdHM6IG51bWJlclxyXG4gIHdpbmRvd0JvdW5kcz86IHtcclxuICAgIHg6IG51bWJlclxyXG4gICAgeTogbnVtYmVyXHJcbiAgICB3aWR0aDogbnVtYmVyXHJcbiAgICBoZWlnaHQ6IG51bWJlclxyXG4gIH1cclxuICBsYW5ndWFnZTogJ3poLUNOJyB8ICdlbi1VUydcclxuICBsb2dMZXZlbDogJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJ1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQcm9qZWN0U3RhdHVzID0gJ3N0b3BwZWQnIHwgJ3J1bm5pbmcnIHwgJ2Vycm9yJ1xyXG5cclxuLy8g5pq06ZyyIEFQSSDliLDmuLLmn5Pov5vnqItcclxuY29uc3QgZWxlY3Ryb25BUEk6IEVsZWN0cm9uQVBJID0ge1xyXG4gIHByb2plY3RzOiB7XHJcbiAgICBnZXRBbGw6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6Z2V0QWxsJyksXHJcbiAgICBjcmVhdGU6IChwcm9qZWN0RGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czpjcmVhdGUnLCBwcm9qZWN0RGF0YSksXHJcbiAgICB1cGRhdGU6IChpZCwgdXBkYXRlcykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czp1cGRhdGUnLCBpZCwgdXBkYXRlcyksXHJcbiAgICBkZWxldGU6IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czpkZWxldGUnLCBpZCksXHJcbiAgICBnZXRSdW5uaW5nOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOmdldFJ1bm5pbmcnKSxcclxuICAgIHN0YXJ0OiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6c3RhcnQnLCBpZCksXHJcbiAgICBzdG9wOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6c3RvcCcsIGlkKSxcclxuICAgIGdldFN0YXR1czogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOmdldFN0YXR1cycsIGlkKVxyXG4gIH0sXHJcblxyXG4gIGxvZ3M6IHtcclxuICAgIGdldE1lbW9yeUxvZ3M6IChwcm9qZWN0SWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnbG9nczpnZXRNZW1vcnlMb2dzJywgcHJvamVjdElkKSxcclxuICAgIGNsZWFyQWxsOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2xvZ3M6Y2xlYXJBbGwnKSxcclxuICAgIGNsZWFyOiAocHJvamVjdElkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2xvZ3M6Y2xlYXInLCBwcm9qZWN0SWQpLFxyXG4gICAgb25EYXRhOiAoY2FsbGJhY2spID0+IHtcclxuICAgICAgaXBjUmVuZGVyZXIub24oJ2xvZ3M6ZGF0YScsIChfLCBkYXRhKSA9PiBjYWxsYmFjayhkYXRhKSlcclxuICAgIH0sXHJcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnM6ICgpID0+IHtcclxuICAgICAgaXBjUmVuZGVyZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdsb2dzOmRhdGEnKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGNvbmZpZzoge1xyXG4gICAgZ2V0OiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvbmZpZzpnZXQnKSxcclxuICAgIHVwZGF0ZTogKHVwZGF0ZXMpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY29uZmlnOnVwZGF0ZScsIHVwZGF0ZXMpLFxyXG4gICAgcmVzZXQ6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY29uZmlnOnJlc2V0JylcclxuICB9LFxyXG5cclxuICBkaWFsb2c6IHtcclxuICAgIHNlbGVjdEZvbGRlcjogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkaWFsb2c6c2VsZWN0Rm9sZGVyJylcclxuICB9LFxyXG5cclxuICBzeXN0ZW06IHtcclxuICAgIG9wZW5Gb2xkZXI6IChmb2xkZXJQYXRoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3N5c3RlbTpvcGVuRm9sZGVyJywgZm9sZGVyUGF0aClcclxuICB9XHJcbn1cclxuXHJcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VsZWN0cm9uQVBJJywgZWxlY3Ryb25BUEkpXHJcblxyXG4vLyDnsbvlnovlo7DmmI5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgZWxlY3Ryb25BUEk6IEVsZWN0cm9uQVBJXHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbImlwY1JlbmRlcmVyIiwiY29udGV4dEJyaWRnZSJdLCJtYXBwaW5ncyI6Ijs7QUE0RkEsTUFBTSxjQUEyQjtBQUFBLEVBQy9CLFVBQVU7QUFBQSxJQUNSLFFBQVEsTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQjtBQUFBLElBQ2xELFFBQVEsQ0FBQyxnQkFBZ0JBLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsV0FBVztBQUFBLElBQzFFLFFBQVEsQ0FBQyxJQUFJLFlBQVlBLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsSUFBSSxPQUFPO0FBQUEsSUFDMUUsUUFBUSxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsRUFBRTtBQUFBLElBQ3hELFlBQVksTUFBTUEsU0FBQUEsWUFBWSxPQUFPLHFCQUFxQjtBQUFBLElBQzFELE9BQU8sQ0FBQyxPQUFPQSxTQUFBQSxZQUFZLE9BQU8sa0JBQWtCLEVBQUU7QUFBQSxJQUN0RCxNQUFNLENBQUMsT0FBT0EsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQixFQUFFO0FBQUEsSUFDcEQsV0FBVyxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxzQkFBc0IsRUFBRTtBQUFBLEVBQ2hFO0FBQUEsRUFFQSxNQUFNO0FBQUEsSUFDSixlQUFlLENBQUMsY0FBY0EsU0FBQUEsWUFBWSxPQUFPLHNCQUFzQixTQUFTO0FBQUEsSUFDaEYsVUFBVSxNQUFNQSxTQUFBQSxZQUFZLE9BQU8sZUFBZTtBQUFBLElBQ2xELE9BQU8sQ0FBQyxjQUFjQSxTQUFBQSxZQUFZLE9BQU8sY0FBYyxTQUFTO0FBQUEsSUFDaEUsUUFBUSxDQUFDLGFBQWE7QUFDcEJBLDJCQUFZLEdBQUcsYUFBYSxDQUFDLEdBQUcsU0FBUyxTQUFTLElBQUksQ0FBQztBQUFBLElBQ3pEO0FBQUEsSUFDQSxvQkFBb0IsTUFBTTtBQUN4QkEsMkJBQVksbUJBQW1CLFdBQVc7QUFBQSxJQUM1QztBQUFBLEVBQ0Y7QUFBQSxFQUVBLFFBQVE7QUFBQSxJQUNOLEtBQUssTUFBTUEsU0FBQUEsWUFBWSxPQUFPLFlBQVk7QUFBQSxJQUMxQyxRQUFRLENBQUMsWUFBWUEsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQixPQUFPO0FBQUEsSUFDaEUsT0FBTyxNQUFNQSxTQUFBQSxZQUFZLE9BQU8sY0FBYztBQUFBLEVBQ2hEO0FBQUEsRUFFQSxRQUFRO0FBQUEsSUFDTixjQUFjLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxxQkFBcUI7QUFBQSxFQUM5RDtBQUFBLEVBRUEsUUFBUTtBQUFBLElBQ04sWUFBWSxDQUFDLGVBQWVBLFNBQUFBLFlBQVksT0FBTyxxQkFBcUIsVUFBVTtBQUFBLEVBQ2hGO0FBQ0Y7QUFFQUMsU0FBQUEsY0FBYyxrQkFBa0IsZUFBZSxXQUFXOyJ9
