"use strict";
const electron = require("electron");
const electronAPI = {
  projects: {
    getAll: () => electron.ipcRenderer.invoke("projects:getAll"),
    create: (projectData) => electron.ipcRenderer.invoke("projects:create", projectData),
    update: (id, updates) => electron.ipcRenderer.invoke("projects:update", id, updates),
    delete: (id) => electron.ipcRenderer.invoke("projects:delete", id),
    getRunning: () => electron.ipcRenderer.invoke("projects:getRunning"),
    start: (id) => electron.ipcRenderer.invoke("projects:start", id),
    stop: (id) => electron.ipcRenderer.invoke("projects:stop", id),
    getStatus: (id) => electron.ipcRenderer.invoke("projects:getStatus", id)
  },
  logs: {
    getMemoryLogs: (projectId) => electron.ipcRenderer.invoke("logs:getMemoryLogs", projectId),
    clearAll: () => electron.ipcRenderer.invoke("logs:clearAll"),
    clear: (projectId) => electron.ipcRenderer.invoke("logs:clear", projectId),
    onData: (callback) => {
      electron.ipcRenderer.on("logs:data", (_, data) => callback(data));
    },
    removeAllListeners: () => {
      electron.ipcRenderer.removeAllListeners("logs:data");
    }
  },
  config: {
    get: () => electron.ipcRenderer.invoke("config:get"),
    update: (updates) => electron.ipcRenderer.invoke("config:update", updates),
    reset: () => electron.ipcRenderer.invoke("config:reset")
  },
  dialog: {
    selectFolder: () => electron.ipcRenderer.invoke("dialog:selectFolder")
  },
  system: {
    openFolder: (folderPath) => electron.ipcRenderer.invoke("system:openFolder", folderPath)
  }
};
electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xuXG4vLyDlrprkuYkgQVBJIOexu+Wei1xuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XG4gIC8vIOmhueebrueuoeeQhlxuICBwcm9qZWN0czoge1xuICAgIGdldEFsbDogKCkgPT4gUHJvbWlzZTxQcm9qZWN0W10+XG4gICAgY3JlYXRlOiAocHJvamVjdERhdGE6IENyZWF0ZVByb2plY3REYXRhKSA9PiBQcm9taXNlPFByb2plY3Q+XG4gICAgdXBkYXRlOiAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxQcm9qZWN0PikgPT4gUHJvbWlzZTxQcm9qZWN0PlxuICAgIGRlbGV0ZTogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cbiAgICBnZXRSdW5uaW5nOiAoKSA9PiBQcm9taXNlPFByb2plY3RbXT5cbiAgICBzdGFydDogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBwaWQ/OiBudW1iZXI7IGVycm9yPzogc3RyaW5nIH0+XG4gICAgc3RvcDogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cbiAgICBnZXRTdGF0dXM6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlPFByb2plY3RTdGF0dXM+XG4gIH1cblxuICAvLyDml6Xlv5fnrqHnkIZcbiAgbG9nczoge1xuICAgIGdldE1lbW9yeUxvZ3M6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gUHJvbWlzZTxMb2dFbnRyeVtdPlxuICAgIGNsZWFyQWxsOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+XG4gICAgY2xlYXI6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPlxuICAgIG9uRGF0YTogKGNhbGxiYWNrOiAoZGF0YTogeyBwcm9qZWN0SWQ6IHN0cmluZzsgZGF0YTogTG9nRW50cnkgfSkgPT4gdm9pZCkgPT4gdm9pZFxuICAgIHJlbW92ZUFsbExpc3RlbmVyczogKCkgPT4gdm9pZFxuICB9XG5cbiAgLy8g6YWN572u566h55CGXG4gIGNvbmZpZzoge1xuICAgIGdldDogKCkgPT4gUHJvbWlzZTxBcHBDb25maWc+XG4gICAgdXBkYXRlOiAodXBkYXRlczogUGFydGlhbDxBcHBDb25maWc+KSA9PiBQcm9taXNlPEFwcENvbmZpZz5cbiAgICByZXNldDogKCkgPT4gUHJvbWlzZTxBcHBDb25maWc+XG4gIH1cblxuICAvLyDns7vnu5/lr7nor53moYZcbiAgZGlhbG9nOiB7XG4gICAgc2VsZWN0Rm9sZGVyOiAoKSA9PiBQcm9taXNlPHN0cmluZyB8IG51bGw+XG4gIH1cblxuICAvLyDns7vnu5/mk43kvZxcbiAgc3lzdGVtOiB7XG4gICAgb3BlbkZvbGRlcjogKGZvbGRlclBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+XG4gIH1cbn1cblxuLy8g5pWw5o2u57G75Z6L5a6a5LmJXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3Qge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcbiAgcGFja2FnZU1hbmFnZXI6ICducG0nIHwgJ3BucG0nIHwgJ3lhcm4nXG4gIHN0YXJ0Q29tbWFuZDogc3RyaW5nXG4gIHN0YXR1czogJ3N0b3BwZWQnIHwgJ3J1bm5pbmcnIHwgJ2Vycm9yJ1xuICBwb3J0PzogbnVtYmVyXG4gIHBpZD86IG51bWJlclxuICB1cmw/OiBzdHJpbmdcbiAgY3JlYXRlZEF0OiBzdHJpbmdcbiAgdXBkYXRlZEF0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVQcm9qZWN0RGF0YSB7XG4gIG5hbWU6IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcbiAgcGFja2FnZU1hbmFnZXI6ICducG0nIHwgJ3BucG0nIHwgJ3lhcm4nXG4gIHN0YXJ0Q29tbWFuZD86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgbGV2ZWw6ICdpbmZvJyB8ICd3YXJuJyB8ICdlcnJvcidcbiAgbWVzc2FnZTogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwQ29uZmlnIHtcbiAgdGhlbWU6ICdsaWdodCcgfCAnZGFyaycgfCAnc3lzdGVtJ1xuICBhdXRvU3RhcnQ6IGJvb2xlYW5cbiAgbWluaW1pemVUb1RyYXk6IGJvb2xlYW5cbiAgc2hvd05vdGlmaWNhdGlvbnM6IGJvb2xlYW5cbiAgZGVmYXVsdFBhY2thZ2VNYW5hZ2VyOiAnbnBtJyB8ICdwbnBtJyB8ICd5YXJuJ1xuICBtYXhDb25jdXJyZW50UHJvamVjdHM6IG51bWJlclxuICB3aW5kb3dCb3VuZHM/OiB7XG4gICAgeDogbnVtYmVyXG4gICAgeTogbnVtYmVyXG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodDogbnVtYmVyXG4gIH1cbiAgbGFuZ3VhZ2U6ICd6aC1DTicgfCAnZW4tVVMnXG4gIGxvZ0xldmVsOiAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InXG59XG5cbmV4cG9ydCB0eXBlIFByb2plY3RTdGF0dXMgPSAnc3RvcHBlZCcgfCAncnVubmluZycgfCAnZXJyb3InXG5cbi8vIOaatOmcsiBBUEkg5Yiw5riy5p+T6L+b56iLXG5jb25zdCBlbGVjdHJvbkFQSTogRWxlY3Ryb25BUEkgPSB7XG4gIHByb2plY3RzOiB7XG4gICAgZ2V0QWxsOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOmdldEFsbCcpLFxuICAgIGNyZWF0ZTogKHByb2plY3REYXRhKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOmNyZWF0ZScsIHByb2plY3REYXRhKSxcbiAgICB1cGRhdGU6IChpZCwgdXBkYXRlcykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czp1cGRhdGUnLCBpZCwgdXBkYXRlcyksXG4gICAgZGVsZXRlOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6ZGVsZXRlJywgaWQpLFxuICAgIGdldFJ1bm5pbmc6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6Z2V0UnVubmluZycpLFxuICAgIHN0YXJ0OiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6c3RhcnQnLCBpZCksXG4gICAgc3RvcDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOnN0b3AnLCBpZCksXG4gICAgZ2V0U3RhdHVzOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6Z2V0U3RhdHVzJywgaWQpXG4gIH0sXG5cbiAgbG9nczoge1xuICAgIGdldE1lbW9yeUxvZ3M6IChwcm9qZWN0SWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnbG9nczpnZXRNZW1vcnlMb2dzJywgcHJvamVjdElkKSxcbiAgICBjbGVhckFsbDogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdsb2dzOmNsZWFyQWxsJyksXG4gICAgY2xlYXI6IChwcm9qZWN0SWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnbG9nczpjbGVhcicsIHByb2plY3RJZCksXG4gICAgb25EYXRhOiAoY2FsbGJhY2spID0+IHtcbiAgICAgIGlwY1JlbmRlcmVyLm9uKCdsb2dzOmRhdGEnLCAoXywgZGF0YSkgPT4gY2FsbGJhY2soZGF0YSkpXG4gICAgfSxcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnM6ICgpID0+IHtcbiAgICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygnbG9nczpkYXRhJylcbiAgICB9XG4gIH0sXG5cbiAgY29uZmlnOiB7XG4gICAgZ2V0OiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvbmZpZzpnZXQnKSxcbiAgICB1cGRhdGU6ICh1cGRhdGVzKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvbmZpZzp1cGRhdGUnLCB1cGRhdGVzKSxcbiAgICByZXNldDogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjb25maWc6cmVzZXQnKVxuICB9LFxuXG4gIGRpYWxvZzoge1xuICAgIHNlbGVjdEZvbGRlcjogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkaWFsb2c6c2VsZWN0Rm9sZGVyJylcbiAgfSxcblxuICBzeXN0ZW06IHtcbiAgICBvcGVuRm9sZGVyOiAoZm9sZGVyUGF0aCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdzeXN0ZW06b3BlbkZvbGRlcicsIGZvbGRlclBhdGgpXG4gIH1cbn1cblxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnZWxlY3Ryb25BUEknLCBlbGVjdHJvbkFQSSlcblxuLy8g57G75Z6L5aOw5piOXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSVxuICB9XG59Il0sIm5hbWVzIjpbImlwY1JlbmRlcmVyIiwiY29udGV4dEJyaWRnZSJdLCJtYXBwaW5ncyI6Ijs7QUEyRkEsTUFBTSxjQUEyQjtBQUFBLEVBQy9CLFVBQVU7QUFBQSxJQUNSLFFBQVEsTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQjtBQUFBLElBQ2xELFFBQVEsQ0FBQyxnQkFBZ0JBLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsV0FBVztBQUFBLElBQzFFLFFBQVEsQ0FBQyxJQUFJLFlBQVlBLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsSUFBSSxPQUFPO0FBQUEsSUFDMUUsUUFBUSxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsRUFBRTtBQUFBLElBQ3hELFlBQVksTUFBTUEsU0FBQUEsWUFBWSxPQUFPLHFCQUFxQjtBQUFBLElBQzFELE9BQU8sQ0FBQyxPQUFPQSxTQUFBQSxZQUFZLE9BQU8sa0JBQWtCLEVBQUU7QUFBQSxJQUN0RCxNQUFNLENBQUMsT0FBT0EsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQixFQUFFO0FBQUEsSUFDcEQsV0FBVyxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxzQkFBc0IsRUFBRTtBQUFBLEVBQ2hFO0FBQUEsRUFFQSxNQUFNO0FBQUEsSUFDSixlQUFlLENBQUMsY0FBY0EsU0FBQUEsWUFBWSxPQUFPLHNCQUFzQixTQUFTO0FBQUEsSUFDaEYsVUFBVSxNQUFNQSxTQUFBQSxZQUFZLE9BQU8sZUFBZTtBQUFBLElBQ2xELE9BQU8sQ0FBQyxjQUFjQSxTQUFBQSxZQUFZLE9BQU8sY0FBYyxTQUFTO0FBQUEsSUFDaEUsUUFBUSxDQUFDLGFBQWE7QUFDcEJBLDJCQUFZLEdBQUcsYUFBYSxDQUFDLEdBQUcsU0FBUyxTQUFTLElBQUksQ0FBQztBQUFBLElBQ3pEO0FBQUEsSUFDQSxvQkFBb0IsTUFBTTtBQUN4QkEsMkJBQVksbUJBQW1CLFdBQVc7QUFBQSxJQUM1QztBQUFBLEVBQ0Y7QUFBQSxFQUVBLFFBQVE7QUFBQSxJQUNOLEtBQUssTUFBTUEsU0FBQUEsWUFBWSxPQUFPLFlBQVk7QUFBQSxJQUMxQyxRQUFRLENBQUMsWUFBWUEsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQixPQUFPO0FBQUEsSUFDaEUsT0FBTyxNQUFNQSxTQUFBQSxZQUFZLE9BQU8sY0FBYztBQUFBLEVBQ2hEO0FBQUEsRUFFQSxRQUFRO0FBQUEsSUFDTixjQUFjLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxxQkFBcUI7QUFBQSxFQUM5RDtBQUFBLEVBRUEsUUFBUTtBQUFBLElBQ04sWUFBWSxDQUFDLGVBQWVBLFNBQUFBLFlBQVksT0FBTyxxQkFBcUIsVUFBVTtBQUFBLEVBQ2hGO0FBQ0Y7QUFFQUMsU0FBQUEsY0FBYyxrQkFBa0IsZUFBZSxXQUFXOyJ9
