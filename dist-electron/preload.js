"use strict";
const electron = require("electron");
const electronAPI = {
  projects: {
    getAll: () => electron.ipcRenderer.invoke("projects:getAll"),
    create: (projectData) => electron.ipcRenderer.invoke("projects:create", projectData),
    update: (id, updates) => electron.ipcRenderer.invoke("projects:update", id, updates),
    delete: (id) => electron.ipcRenderer.invoke("projects:delete", id),
    getRunning: () => electron.ipcRenderer.invoke("projects:getRunning"),
    start: (id) => electron.ipcRenderer.invoke("projects:start", id),
    stop: (id) => electron.ipcRenderer.invoke("projects:stop", id),
    getStatus: (id) => electron.ipcRenderer.invoke("projects:getStatus", id)
  },
  logs: {
    getMemoryLogs: (projectId) => electron.ipcRenderer.invoke("logs:getMemoryLogs", projectId),
    clearAll: () => electron.ipcRenderer.invoke("logs:clearAll"),
    clear: (projectId) => electron.ipcRenderer.invoke("logs:clear", projectId),
    onData: (callback) => {
      electron.ipcRenderer.on("logs:data", (_, data) => callback(data));
    },
    removeAllListeners: () => {
      electron.ipcRenderer.removeAllListeners("logs:data");
    }
  },
  config: {
    get: () => electron.ipcRenderer.invoke("config:get"),
    update: (updates) => electron.ipcRenderer.invoke("config:update", updates),
    reset: () => electron.ipcRenderer.invoke("config:reset")
  },
  dialog: {
    selectFolder: () => electron.ipcRenderer.invoke("dialog:selectFolder")
  },
  system: {
    openFolder: (folderPath) => electron.ipcRenderer.invoke("system:openFolder", folderPath)
  }
};
electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuLy8g5a6a5LmJIEFQSSDnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XHJcbiAgLy8g6aG555uu566h55CGXHJcbiAgcHJvamVjdHM6IHtcclxuICAgIGdldEFsbDogKCkgPT4gUHJvbWlzZTxQcm9qZWN0W10+XHJcbiAgICBjcmVhdGU6IChwcm9qZWN0RGF0YTogQ3JlYXRlUHJvamVjdERhdGEpID0+IFByb21pc2U8UHJvamVjdD5cclxuICAgIHVwZGF0ZTogKGlkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8UHJvamVjdD4pID0+IFByb21pc2U8UHJvamVjdD5cclxuICAgIGRlbGV0ZTogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGdldFJ1bm5pbmc6ICgpID0+IFByb21pc2U8UHJvamVjdFtdPlxyXG4gICAgc3RhcnQ6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgcGlkPzogbnVtYmVyOyBlcnJvcj86IHN0cmluZyB9PlxyXG4gICAgc3RvcDogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGdldFN0YXR1czogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8UHJvamVjdFN0YXR1cz5cclxuICB9XHJcblxyXG4gIC8vIOaXpeW/l+euoeeQhlxyXG4gIGxvZ3M6IHtcclxuICAgIGdldE1lbW9yeUxvZ3M6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gUHJvbWlzZTxMb2dFbnRyeVtdPlxyXG4gICAgY2xlYXJBbGw6ICgpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIGNsZWFyOiAocHJvamVjdElkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cclxuICAgIG9uRGF0YTogKGNhbGxiYWNrOiAoZGF0YTogeyBwcm9qZWN0SWQ6IHN0cmluZzsgZGF0YTogTG9nRW50cnkgfSkgPT4gdm9pZCkgPT4gdm9pZFxyXG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiAoKSA9PiB2b2lkXHJcbiAgfVxyXG5cclxuICAvLyDphY3nva7nrqHnkIZcclxuICBjb25maWc6IHtcclxuICAgIGdldDogKCkgPT4gUHJvbWlzZTxBcHBDb25maWc+XHJcbiAgICB1cGRhdGU6ICh1cGRhdGVzOiBQYXJ0aWFsPEFwcENvbmZpZz4pID0+IFByb21pc2U8QXBwQ29uZmlnPlxyXG4gICAgcmVzZXQ6ICgpID0+IFByb21pc2U8QXBwQ29uZmlnPlxyXG4gIH1cclxuXHJcbiAgLy8g57O757uf5a+56K+d5qGGXHJcbiAgZGlhbG9nOiB7XHJcbiAgICBzZWxlY3RGb2xkZXI6ICgpID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbD5cclxuICB9XHJcblxyXG4gIC8vIOezu+e7n+aTjeS9nFxyXG4gIHN5c3RlbToge1xyXG4gICAgb3BlbkZvbGRlcjogKGZvbGRlclBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+XHJcbiAgfVxyXG59XHJcblxyXG4vLyDmlbDmja7nsbvlnovlrprkuYlcclxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0IHtcclxuICBpZDogc3RyaW5nXHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgcGFja2FnZU1hbmFnZXI6ICducG0nIHwgJ3BucG0nIHwgJ3lhcm4nXHJcbiAgc3RhcnRDb21tYW5kOiBzdHJpbmdcclxuICBzdGF0dXM6ICdzdG9wcGVkJyB8ICdydW5uaW5nJyB8ICdlcnJvcidcclxuICBwb3J0PzogbnVtYmVyXHJcbiAgcGlkPzogbnVtYmVyXHJcbiAgdXJsPzogc3RyaW5nXHJcbiAgY3JlYXRlZEF0OiBzdHJpbmdcclxuICB1cGRhdGVkQXQ6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVByb2plY3REYXRhIHtcclxuICBuYW1lOiBzdHJpbmdcclxuICBwYXRoOiBzdHJpbmdcclxuICBwYWNrYWdlTWFuYWdlcjogJ25wbScgfCAncG5wbScgfCAneWFybidcclxuICBzdGFydENvbW1hbmQ/OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMb2dFbnRyeSB7XHJcbiAgdGltZXN0YW1wOiBzdHJpbmdcclxuICBsZXZlbDogJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJ1xyXG4gIG1lc3NhZ2U6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcENvbmZpZyB7XHJcbiAgdGhlbWU6ICdsaWdodCcgfCAnZGFyaycgfCAnc3lzdGVtJ1xyXG4gIGF1dG9TdGFydDogYm9vbGVhblxyXG4gIG1pbmltaXplVG9UcmF5OiBib29sZWFuXHJcbiAgc2hvd05vdGlmaWNhdGlvbnM6IGJvb2xlYW5cclxuICBkZWZhdWx0UGFja2FnZU1hbmFnZXI6ICducG0nIHwgJ3BucG0nIHwgJ3lhcm4nXHJcbiAgbWF4Q29uY3VycmVudFByb2plY3RzOiBudW1iZXJcclxuICB3aW5kb3dCb3VuZHM/OiB7XHJcbiAgICB4OiBudW1iZXJcclxuICAgIHk6IG51bWJlclxyXG4gICAgd2lkdGg6IG51bWJlclxyXG4gICAgaGVpZ2h0OiBudW1iZXJcclxuICB9XHJcbiAgbGFuZ3VhZ2U6ICd6aC1DTicgfCAnZW4tVVMnXHJcbiAgbG9nTGV2ZWw6ICdpbmZvJyB8ICd3YXJuJyB8ICdlcnJvcidcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUHJvamVjdFN0YXR1cyA9ICdzdG9wcGVkJyB8ICdydW5uaW5nJyB8ICdlcnJvcidcclxuXHJcbi8vIOaatOmcsiBBUEkg5Yiw5riy5p+T6L+b56iLXHJcbmNvbnN0IGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSSA9IHtcclxuICBwcm9qZWN0czoge1xyXG4gICAgZ2V0QWxsOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOmdldEFsbCcpLFxyXG4gICAgY3JlYXRlOiAocHJvamVjdERhdGEpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6Y3JlYXRlJywgcHJvamVjdERhdGEpLFxyXG4gICAgdXBkYXRlOiAoaWQsIHVwZGF0ZXMpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6dXBkYXRlJywgaWQsIHVwZGF0ZXMpLFxyXG4gICAgZGVsZXRlOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgncHJvamVjdHM6ZGVsZXRlJywgaWQpLFxyXG4gICAgZ2V0UnVubmluZzogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czpnZXRSdW5uaW5nJyksXHJcbiAgICBzdGFydDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOnN0YXJ0JywgaWQpLFxyXG4gICAgc3RvcDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb2plY3RzOnN0b3AnLCBpZCksXHJcbiAgICBnZXRTdGF0dXM6IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdwcm9qZWN0czpnZXRTdGF0dXMnLCBpZClcclxuICB9LFxyXG5cclxuICBsb2dzOiB7XHJcbiAgICBnZXRNZW1vcnlMb2dzOiAocHJvamVjdElkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2xvZ3M6Z2V0TWVtb3J5TG9ncycsIHByb2plY3RJZCksXHJcbiAgICBjbGVhckFsbDogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdsb2dzOmNsZWFyQWxsJyksXHJcbiAgICBjbGVhcjogKHByb2plY3RJZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdsb2dzOmNsZWFyJywgcHJvamVjdElkKSxcclxuICAgIG9uRGF0YTogKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgIGlwY1JlbmRlcmVyLm9uKCdsb2dzOmRhdGEnLCAoXywgZGF0YSkgPT4gY2FsbGJhY2soZGF0YSkpXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiAoKSA9PiB7XHJcbiAgICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygnbG9nczpkYXRhJylcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBjb25maWc6IHtcclxuICAgIGdldDogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjb25maWc6Z2V0JyksXHJcbiAgICB1cGRhdGU6ICh1cGRhdGVzKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvbmZpZzp1cGRhdGUnLCB1cGRhdGVzKSxcclxuICAgIHJlc2V0OiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvbmZpZzpyZXNldCcpXHJcbiAgfSxcclxuXHJcbiAgZGlhbG9nOiB7XHJcbiAgICBzZWxlY3RGb2xkZXI6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGlhbG9nOnNlbGVjdEZvbGRlcicpXHJcbiAgfSxcclxuXHJcbiAgc3lzdGVtOiB7XHJcbiAgICBvcGVuRm9sZGVyOiAoZm9sZGVyUGF0aCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdzeXN0ZW06b3BlbkZvbGRlcicsIGZvbGRlclBhdGgpXHJcbiAgfVxyXG59XHJcblxyXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdlbGVjdHJvbkFQSScsIGVsZWN0cm9uQVBJKVxyXG5cclxuLy8g57G75Z6L5aOw5piOXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgIGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSVxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJpcGNSZW5kZXJlciIsImNvbnRleHRCcmlkZ2UiXSwibWFwcGluZ3MiOiI7O0FBMkZBLE1BQU0sY0FBMkI7QUFBQSxFQUMvQixVQUFVO0FBQUEsSUFDUixRQUFRLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxpQkFBaUI7QUFBQSxJQUNsRCxRQUFRLENBQUMsZ0JBQWdCQSxTQUFBQSxZQUFZLE9BQU8sbUJBQW1CLFdBQVc7QUFBQSxJQUMxRSxRQUFRLENBQUMsSUFBSSxZQUFZQSxTQUFBQSxZQUFZLE9BQU8sbUJBQW1CLElBQUksT0FBTztBQUFBLElBQzFFLFFBQVEsQ0FBQyxPQUFPQSxTQUFBQSxZQUFZLE9BQU8sbUJBQW1CLEVBQUU7QUFBQSxJQUN4RCxZQUFZLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxxQkFBcUI7QUFBQSxJQUMxRCxPQUFPLENBQUMsT0FBT0EsU0FBQUEsWUFBWSxPQUFPLGtCQUFrQixFQUFFO0FBQUEsSUFDdEQsTUFBTSxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxpQkFBaUIsRUFBRTtBQUFBLElBQ3BELFdBQVcsQ0FBQyxPQUFPQSxTQUFBQSxZQUFZLE9BQU8sc0JBQXNCLEVBQUU7QUFBQSxFQUNoRTtBQUFBLEVBRUEsTUFBTTtBQUFBLElBQ0osZUFBZSxDQUFDLGNBQWNBLFNBQUFBLFlBQVksT0FBTyxzQkFBc0IsU0FBUztBQUFBLElBQ2hGLFVBQVUsTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGVBQWU7QUFBQSxJQUNsRCxPQUFPLENBQUMsY0FBY0EsU0FBQUEsWUFBWSxPQUFPLGNBQWMsU0FBUztBQUFBLElBQ2hFLFFBQVEsQ0FBQyxhQUFhO0FBQ3BCQSwyQkFBWSxHQUFHLGFBQWEsQ0FBQyxHQUFHLFNBQVMsU0FBUyxJQUFJLENBQUM7QUFBQSxJQUN6RDtBQUFBLElBQ0Esb0JBQW9CLE1BQU07QUFDeEJBLDJCQUFZLG1CQUFtQixXQUFXO0FBQUEsSUFDNUM7QUFBQSxFQUNGO0FBQUEsRUFFQSxRQUFRO0FBQUEsSUFDTixLQUFLLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxZQUFZO0FBQUEsSUFDMUMsUUFBUSxDQUFDLFlBQVlBLFNBQUFBLFlBQVksT0FBTyxpQkFBaUIsT0FBTztBQUFBLElBQ2hFLE9BQU8sTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGNBQWM7QUFBQSxFQUNoRDtBQUFBLEVBRUEsUUFBUTtBQUFBLElBQ04sY0FBYyxNQUFNQSxTQUFBQSxZQUFZLE9BQU8scUJBQXFCO0FBQUEsRUFDOUQ7QUFBQSxFQUVBLFFBQVE7QUFBQSxJQUNOLFlBQVksQ0FBQyxlQUFlQSxTQUFBQSxZQUFZLE9BQU8scUJBQXFCLFVBQVU7QUFBQSxFQUNoRjtBQUNGO0FBRUFDLFNBQUFBLGNBQWMsa0JBQWtCLGVBQWUsV0FBVzsifQ==
