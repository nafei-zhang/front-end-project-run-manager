{"version":3,"file":"main.js","sources":["../electron/services/ProjectManager.ts","../electron/services/ProcessManager.ts","../electron/services/LogManager.ts","../electron/services/ConfigManager.ts","../electron/main.ts"],"sourcesContent":["import { readFileSync, writeFileSync, existsSync } from 'fs'\nimport { join } from 'path'\nimport { app } from 'electron'\nimport { randomUUID } from 'crypto'\n\nexport interface Project {\n  id: string\n  name: string\n  path: string\n  packageManager: 'npm' | 'pnpm' | 'yarn'\n  startCommand: string\n  status: 'stopped' | 'running' | 'error'\n  port?: number\n  pid?: number\n  url?: string  // 添加 URL 字段\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface CreateProjectData {\n  name: string\n  path: string\n  packageManager: 'npm' | 'pnpm' | 'yarn'\n  startCommand?: string\n}\n\ninterface ProjectsData {\n  projects: Project[]\n}\n\nexport class ProjectManager {\n  private projectsFilePath: string\n  private projects: Project[] = []\n\n  constructor() {\n    this.projectsFilePath = join(app.getPath('userData'), 'projects.json')\n    this.loadProjects()\n  }\n\n  private loadProjects(): void {\n    try {\n      if (existsSync(this.projectsFilePath)) {\n        const data = readFileSync(this.projectsFilePath, 'utf-8')\n        const projectsData: ProjectsData = JSON.parse(data)\n        this.projects = projectsData.projects || []\n      } else {\n        this.projects = []\n        this.saveProjects()\n      }\n    } catch (error) {\n      console.error('Failed to load projects:', error)\n      this.projects = []\n    }\n  }\n\n  private saveProjects(): void {\n    console.log('[ProjectManager] saveProjects called, projects to save:', this.projects.length)\n    console.log('[ProjectManager] Projects data:', this.projects)\n    console.log('[ProjectManager] Saving to file:', this.projectsFilePath)\n    try {\n      const data: ProjectsData = { projects: this.projects }\n      writeFileSync(this.projectsFilePath, JSON.stringify(data, null, 2))\n      console.log('[ProjectManager] Successfully saved projects to file')\n    } catch (error) {\n      console.error('[ProjectManager] Failed to save projects:', error)\n    }\n  }\n\n  getAllProjects(): Project[] {\n    console.log('[ProjectManager] getAllProjects called, returning:', this.projects.length, 'projects')\n    return [...this.projects]\n  }\n\n  getProject(id: string): Project | undefined {\n    return this.projects.find(project => project.id === id)\n  }\n\n  createProject(projectData: CreateProjectData): Project {\n    console.log('[ProjectManager] createProject called with data:', projectData)\n    const now = new Date().toISOString()\n    \n    // 检测默认启动命令\n    let startCommand = projectData.startCommand || 'dev'\n    \n    // 尝试读取 package.json 来检测可用的脚本\n    try {\n      const packageJsonPath = join(projectData.path, 'package.json')\n      console.log('[ProjectManager] Checking package.json at:', packageJsonPath)\n      if (existsSync(packageJsonPath)) {\n        const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'))\n        const scripts = packageJson.scripts || {}\n        console.log('[ProjectManager] Found scripts:', scripts)\n        \n        // 优先级：dev > start > serve\n        if (scripts.dev) {\n          startCommand = 'dev'\n        } else if (scripts.start) {\n          startCommand = 'start'\n        } else if (scripts.serve) {\n          startCommand = 'serve'\n        }\n      } else {\n        console.log('[ProjectManager] package.json not found at path')\n      }\n    } catch (error) {\n      console.warn('[ProjectManager] Failed to read package.json:', error)\n    }\n\n    const project: Project = {\n      id: randomUUID(),\n      name: projectData.name,\n      path: projectData.path,\n      packageManager: projectData.packageManager,\n      startCommand,\n      status: 'stopped',\n      createdAt: now,\n      updatedAt: now\n    }\n\n    console.log('[ProjectManager] Created project object:', project)\n    console.log('[ProjectManager] Current projects count before add:', this.projects.length)\n    \n    this.projects.push(project)\n    console.log('[ProjectManager] Current projects count after add:', this.projects.length)\n    \n    console.log('[ProjectManager] Calling saveProjects...')\n    this.saveProjects()\n    console.log('[ProjectManager] saveProjects completed')\n    \n    return project\n  }\n\n  updateProject(id: string, updates: Partial<Project>): Project | null {\n    const projectIndex = this.projects.findIndex(project => project.id === id)\n    if (projectIndex === -1) return null\n\n    this.projects[projectIndex] = {\n      ...this.projects[projectIndex],\n      ...updates,\n      updatedAt: new Date().toISOString()\n    }\n\n    this.saveProjects()\n    return this.projects[projectIndex]\n  }\n\n  // 新增：重置所有项目状态为停止状态（应用启动时调用）\n  resetAllProjectsToStopped(): void {\n    console.log('[ProjectManager] Resetting all projects to stopped status')\n    let hasChanges = false\n    \n    this.projects.forEach(project => {\n      if (project.status === 'running' || project.pid || project.url) {\n        console.log('[ProjectManager] Resetting project:', project.id, project.name)\n        project.status = 'stopped'\n        project.pid = undefined\n        project.url = undefined  // 清除 URL\n        project.port = undefined  // 清除端口\n        project.updatedAt = new Date().toISOString()\n        hasChanges = true\n      }\n    })\n    \n    if (hasChanges) {\n      console.log('[ProjectManager] Saving updated project states')\n      this.saveProjects()\n    } else {\n      console.log('[ProjectManager] No projects needed status reset')\n    }\n  }\n\n  deleteProject(id: string): boolean {\n    const projectIndex = this.projects.findIndex(project => project.id === id)\n    \n    if (projectIndex === -1) {\n      return false\n    }\n\n    this.projects.splice(projectIndex, 1)\n    this.saveProjects()\n    \n    return true\n  }\n\n  // 检测项目的包管理器\n  detectPackageManager(projectPath: string): 'npm' | 'pnpm' | 'yarn' {\n    if (existsSync(join(projectPath, 'pnpm-lock.yaml'))) {\n      return 'pnpm'\n    }\n    if (existsSync(join(projectPath, 'yarn.lock'))) {\n      return 'yarn'\n    }\n    return 'npm'\n  }\n\n  // 验证项目路径\n  validateProjectPath(projectPath: string): boolean {\n    return existsSync(join(projectPath, 'package.json'))\n  }\n}","import { spawn, ChildProcess } from 'child_process'\nimport { Project } from './ProjectManager'\nimport { LogManager } from './LogManager'\n\nexport interface ProcessInfo {\n  projectId: string\n  process: ChildProcess\n  pid: number\n  startTime: Date\n}\n\nexport class ProcessManager {\n  private runningProcesses: Map<string, ProcessInfo> = new Map()\n  private logManager: LogManager\n  private onProjectStatusChange?: (projectId: string, status: 'running' | 'stopped') => void\n\n  constructor(logManager: LogManager) {\n    this.logManager = logManager\n  }\n\n  setProjectStatusChangeCallback(callback: (projectId: string, status: 'running' | 'stopped') => void): void {\n    this.onProjectStatusChange = callback\n  }\n\n  async startProject(project: Project): Promise<{ success: boolean; pid?: number; error?: string }> {\n    console.log('[ProcessManager] startProject called for project:', project.id, project.name)\n    \n    try {\n      // 检查项目是否已经在运行\n      if (this.runningProcesses.has(project.id)) {\n        console.log('[ProcessManager] Project is already running')\n        return { success: false, error: 'Project is already running' }\n      }\n\n      // 构建命令\n      const command = this.buildCommand(project.packageManager, project.startCommand)\n      console.log('[ProcessManager] Starting command:', command.cmd, command.args.join(' '))\n      \n      // 启动进程\n      const childProcess = spawn(command.cmd, command.args, {\n        cwd: project.path,\n        stdio: ['pipe', 'pipe', 'pipe'],\n        shell: true,\n        env: { ...process.env, FORCE_COLOR: '1' }\n      })\n\n      if (!childProcess.pid) {\n        console.log('[ProcessManager] Failed to get PID from child process')\n        return { success: false, error: 'Failed to start process' }\n      }\n\n      console.log('[ProcessManager] Process started with PID:', childProcess.pid)\n\n      // 记录进程信息\n      const processInfo: ProcessInfo = {\n        projectId: project.id,\n        process: childProcess,\n        pid: childProcess.pid,\n        startTime: new Date()\n      }\n\n      this.runningProcesses.set(project.id, processInfo)\n      console.log('[ProcessManager] Added process to running processes list')\n      console.log('[ProcessManager] Current running processes:', Array.from(this.runningProcesses.keys()))\n\n      // 设置日志监听\n      this.setupLogListeners(project.id, childProcess)\n\n      // 监听进程退出\n      childProcess.on('exit', (code, signal) => {\n        console.log('[ProcessManager] Process exited:', project.id, 'code:', code, 'signal:', signal)\n        this.runningProcesses.delete(project.id)\n        console.log('[ProcessManager] Removed process from running list on exit')\n        this.logManager.addLog(project.id, {\n          timestamp: new Date().toISOString(),\n          level: code === 0 ? 'info' : 'error',\n          message: `Process exited with code ${code} ${signal ? `(${signal})` : ''}`\n        })\n      })\n\n      childProcess.on('error', (error) => {\n        console.log('[ProcessManager] Process error:', project.id, error.message)\n        this.runningProcesses.delete(project.id)\n        console.log('[ProcessManager] Removed process from running list on error')\n        this.logManager.addLog(project.id, {\n          timestamp: new Date().toISOString(),\n          level: 'error',\n          message: `Process error: ${error.message}`\n        })\n      })\n\n      // 添加启动日志\n      this.logManager.addLog(project.id, {\n        timestamp: new Date().toISOString(),\n        level: 'info',\n        message: `Starting project: ${command.cmd} ${command.args.join(' ')}`\n      })\n\n      console.log('[ProcessManager] Process started successfully')\n      return { success: true, pid: childProcess.pid }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\n      console.log('[ProcessManager] Failed to start project:', errorMessage)\n      return { success: false, error: errorMessage }\n    }\n  }\n\n  async stopProject(projectId: string): Promise<boolean> {\n    console.log('[ProcessManager] stopProject called for projectId:', projectId)\n    console.log('[ProcessManager] Current running processes:', Array.from(this.runningProcesses.keys()))\n    console.log('[ProcessManager] Total running processes count:', this.runningProcesses.size)\n    \n    const processInfo = this.runningProcesses.get(projectId)\n    \n    if (!processInfo) {\n      console.log('[ProcessManager] No running process found for projectId:', projectId)\n      // 如果进程不在运行列表中，可能已经停止了，视为成功\n      console.log('[ProcessManager] Process may have already stopped, treating as success')\n      return true\n    }\n\n    console.log('[ProcessManager] Found running process, PID:', processInfo.pid)\n\n    return new Promise((resolve) => {\n        let isResolved = false\n        let forceKillTimeout: NodeJS.Timeout | null = null\n        \n        const cleanup = () => {\n          if (!isResolved) {\n            isResolved = true\n            if (forceKillTimeout) {\n              clearTimeout(forceKillTimeout)\n            }\n            this.runningProcesses.delete(projectId)\n            console.log('[ProcessManager] Removed process from running processes list')\n          }\n        }\n\n      // 监听进程退出事件\n      const onExit = (code: number | null, signal: string | null) => {\n        console.log(`[ProcessManager] Process ${projectId} exited with code ${code}, signal ${signal}`)\n        cleanup()\n        \n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level: 'info',\n          message: `Project stopped (code: ${code}, signal: ${signal})`\n        })\n        \n        // 通知项目状态变更\n        if (this.onProjectStatusChange) {\n          console.log(`[ProcessManager] Notifying project status change to stopped for ${projectId}`)\n          this.onProjectStatusChange(projectId, 'stopped')\n        }\n        \n        if (!isResolved) {\n          resolve(true)\n        }\n      }\n\n      // 监听进程错误事件\n      const onError = (error: Error) => {\n        console.log(`[ProcessManager] Process ${projectId} error during stop:`, error.message)\n        \n        // 特殊处理WebSocket错误\n        if (error.message.includes('WebSocket') || error.message.includes('RSV1')) {\n          console.log('[ProcessManager] WebSocket error detected, treating as normal termination')\n          this.logManager.addLog(projectId, {\n            timestamp: new Date().toISOString(),\n            level: 'info',\n            message: 'Project stopped (WebSocket connection closed)'\n          })\n        } else {\n          this.logManager.addLog(projectId, {\n            timestamp: new Date().toISOString(),\n            level: 'warn',\n            message: `Process error during stop: ${error.message}`\n          })\n        }\n        \n        cleanup()\n        if (!isResolved) {\n          resolve(true)\n        }\n      }\n\n      // 添加事件监听器\n      processInfo.process.once('exit', onExit)\n      processInfo.process.once('error', onError)\n\n      try {\n        // 记录停止开始\n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level: 'info',\n          message: 'Stopping project...'\n        })\n\n        // 第一步：发送SIGTERM信号，给进程时间优雅关闭\n        console.log('[ProcessManager] Sending SIGTERM to process for graceful shutdown')\n        processInfo.process.kill('SIGTERM')\n\n        // 设置超时机制：如果5秒内进程没有退出，则强制终止\n         forceKillTimeout = setTimeout(() => {\n           if (!isResolved) {\n             console.log('[ProcessManager] Process did not exit gracefully, sending SIGKILL')\n             \n             try {\n               // 检查进程是否仍然存在\n               process.kill(processInfo.pid, 0)\n               console.log('[ProcessManager] Process still exists, force killing')\n               processInfo.process.kill('SIGKILL')\n               \n               this.logManager.addLog(projectId, {\n                 timestamp: new Date().toISOString(),\n                 level: 'warn',\n                 message: 'Process force killed after timeout'\n               })\n             } catch (checkError) {\n               // 进程已经不存在了\n               console.log('[ProcessManager] Process already terminated during force kill check')\n             }\n\n             // 如果强制杀死后还没有resolve，则手动cleanup和resolve\n             setTimeout(() => {\n               if (!isResolved) {\n                 console.log('[ProcessManager] Force resolving after SIGKILL')\n                 cleanup()\n                 resolve(true)\n               }\n             }, 1000)\n           }\n         }, 5000) // 5秒超时\n\n        console.log('[ProcessManager] Graceful stop initiated, waiting for process to exit...')\n        \n      } catch (error) {\n        console.error('[ProcessManager] Failed to send stop signal:', error)\n        \n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level: 'error',\n          message: `Failed to stop project: ${error instanceof Error ? error.message : 'Unknown error'}`\n        })\n        \n        cleanup()\n        resolve(false)\n      }\n    })\n  }\n\n  stopAllProjects(): void {\n    for (const [projectId] of this.runningProcesses) {\n      this.stopProject(projectId)\n    }\n  }\n\n  getRunningProjects(): string[] {\n    return Array.from(this.runningProcesses.keys())\n  }\n\n  isProjectRunning(projectId: string): boolean {\n    return this.runningProcesses.has(projectId)\n  }\n\n  getProcessInfo(projectId: string): ProcessInfo | undefined {\n    return this.runningProcesses.get(projectId)\n  }\n\n  private buildCommand(packageManager: string, startCommand: string): { cmd: string; args: string[] } {\n    // 如果启动命令已经包含完整的命令格式，直接解析\n    if (startCommand.includes(' ')) {\n      const parts = startCommand.trim().split(/\\s+/)\n      return { cmd: parts[0], args: parts.slice(1) }\n    }\n    \n    // 向后兼容：如果只是简单的命令名，使用原有的包管理器逻辑\n    switch (packageManager) {\n      case 'pnpm':\n        return { cmd: 'pnpm', args: ['run', startCommand] }\n      case 'yarn':\n        return { cmd: 'yarn', args: [startCommand] }\n      case 'npm':\n      default:\n        return { cmd: 'npm', args: ['run', startCommand] }\n    }\n  }\n\n  private setupLogListeners(projectId: string, childProcess: ChildProcess): void {\n    // 监听标准输出\n    childProcess.stdout?.on('data', (data) => {\n      const message = data.toString().trim()\n      if (message) {\n        // 检测并提取 URL 信息\n        this.extractAndSaveUrl(projectId, message)\n        \n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level: 'info',\n          message: this.cleanLogMessage(message)\n        })\n      }\n    })\n\n    // 监听标准错误\n    childProcess.stderr?.on('data', (data) => {\n      const message = data.toString().trim()\n      if (message) {\n        // 也检查 stderr 中的 URL 信息（某些工具会将正常信息输出到 stderr）\n        this.extractAndSaveUrl(projectId, message)\n        \n        // 判断是否为错误信息（很多工具会将正常信息输出到 stderr）\n        const level = this.isErrorMessage(message) ? 'error' : 'warn'\n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level,\n          message: this.cleanLogMessage(message)\n        })\n      }\n    })\n  }\n\n  private extractAndSaveUrl(projectId: string, message: string): void {\n    console.log(`[ProcessManager] Checking message for URL patterns: \"${message}\"`)\n    \n    // 检测常见的开发服务器 URL 模式\n    const urlPatterns = [\n      // Vite: Local: http://localhost:5173/\n      /Local:\\s*https?:\\/\\/[^\\s]+/i,\n      // Vue CLI: App running at: - Local: http://localhost:8080/\n      /Local:\\s*https?:\\/\\/[^\\s]+/i,\n      // Create React App: Local: http://localhost:3000\n      /Local:\\s*https?:\\/\\/[^\\s]+/i,\n      // Next.js: ready - started server on 0.0.0.0:3000, url: http://localhost:3000\n      /url:\\s*https?:\\/\\/[^\\s]+/i,\n      // 通用模式: http://localhost:端口\n      /https?:\\/\\/localhost:\\d+\\/?/i,\n      // 通用模式: http://127.0.0.1:端口\n      /https?:\\/\\/127\\.0\\.0\\.1:\\d+\\/?/i\n    ]\n\n    for (const pattern of urlPatterns) {\n      const match = message.match(pattern)\n      if (match) {\n        let url = match[0]\n        console.log(`[ProcessManager] Found URL match: \"${url}\" using pattern: ${pattern}`)\n        \n        // 清理 URL，移除前缀\n        url = url.replace(/^(Local:\\s*|url:\\s*)/i, '').trim()\n        \n        // 确保 URL 以 / 结尾\n        if (!url.endsWith('/')) {\n          url += '/'\n        }\n\n        // 提取端口号\n        const portMatch = url.match(/:(\\d+)/)\n        const port = portMatch ? parseInt(portMatch[1]) : undefined\n\n        console.log(`[ProcessManager] Detected URL for project ${projectId}: ${url}, port: ${port}`)\n        \n        // 通过 IPC 通知主进程更新项目信息\n        if (this.onUrlDetected) {\n          console.log(`[ProcessManager] Calling URL detected callback for project ${projectId}`)\n          this.onUrlDetected(projectId, url, port)\n        } else {\n          console.log(`[ProcessManager] No URL detected callback set`)\n        }\n        \n        // 添加 URL 检测日志\n        this.logManager.addLog(projectId, {\n          timestamp: new Date().toISOString(),\n          level: 'info',\n          message: `🌐 项目已启动，访问地址: ${url}`\n        })\n        \n        break // 找到第一个匹配的 URL 就停止\n      }\n    }\n    \n    if (!message.match(/Local:|url:|localhost|127\\.0\\.0\\.1/i)) {\n      // 只有当消息不包含任何URL相关关键词时才跳过日志\n    } else {\n      console.log(`[ProcessManager] No URL pattern matched for message: \"${message}\"`)\n    }\n  }\n\n  // 添加 URL 检测回调\n  private onUrlDetected?: (projectId: string, url: string, port?: number) => void\n\n  setUrlDetectedCallback(callback: (projectId: string, url: string, port?: number) => void): void {\n    this.onUrlDetected = callback\n  }\n\n  private cleanLogMessage(message: string): string {\n    // 移除 ANSI 颜色代码\n    return message.replace(/\\x1b\\[[0-9;]*m/g, '')\n  }\n\n  private isErrorMessage(message: string): boolean {\n    const errorKeywords = ['error', 'failed', 'exception', 'cannot', 'unable']\n    const lowerMessage = message.toLowerCase()\n    return errorKeywords.some(keyword => lowerMessage.includes(keyword))\n  }\n}","import { BrowserWindow } from 'electron'\n\nexport interface LogEntry {\n  timestamp: string\n  level: 'info' | 'warn' | 'error'\n  message: string\n}\n\nexport class LogManager {\n  private logs: Map<string, LogEntry[]> = new Map()\n  private maxLogsPerProject = 500\n  private mainWindow?: BrowserWindow\n\n  setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window\n  }\n\n  addLog(projectId: string, logEntry: LogEntry): void {\n    if (!this.logs.has(projectId)) {\n      this.logs.set(projectId, [])\n    }\n\n    const projectLogs = this.logs.get(projectId)!\n    projectLogs.push(logEntry)\n\n    // 保持循环缓冲区大小\n    if (projectLogs.length > this.maxLogsPerProject) {\n      projectLogs.shift() // 移除最旧的日志\n    }\n\n    // 实时发送日志到渲染进程\n    this.sendLogToRenderer(projectId, logEntry)\n  }\n\n  getMemoryLogs(projectId: string): LogEntry[] {\n    return this.logs.get(projectId) || []\n  }\n\n  getAllMemoryLogs(): Record<string, LogEntry[]> {\n    const result: Record<string, LogEntry[]> = {}\n    for (const [projectId, logs] of this.logs) {\n      result[projectId] = [...logs]\n    }\n    return result\n  }\n\n  clearProjectLogs(projectId: string): void {\n    this.logs.delete(projectId)\n    \n    // 通知渲染进程日志已清除\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('logs:cleared', projectId)\n    }\n  }\n\n  clearAllLogs(): void {\n    this.logs.clear()\n    \n    // 通知渲染进程所有日志已清除\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('logs:allCleared')\n    }\n  }\n\n  getLogStats(projectId: string): { total: number; errors: number; warnings: number } {\n    const logs = this.logs.get(projectId) || []\n    \n    return {\n      total: logs.length,\n      errors: logs.filter(log => log.level === 'error').length,\n      warnings: logs.filter(log => log.level === 'warn').length\n    }\n  }\n\n  // 获取最近的错误日志\n  getRecentErrors(projectId: string, limit = 10): LogEntry[] {\n    const logs = this.logs.get(projectId) || []\n    return logs\n      .filter(log => log.level === 'error')\n      .slice(-limit)\n  }\n\n  // 搜索日志\n  searchLogs(projectId: string, query: string, level?: LogEntry['level']): LogEntry[] {\n    const logs = this.logs.get(projectId) || []\n    const lowerQuery = query.toLowerCase()\n    \n    return logs.filter(log => {\n      const matchesQuery = log.message.toLowerCase().includes(lowerQuery)\n      const matchesLevel = !level || log.level === level\n      return matchesQuery && matchesLevel\n    })\n  }\n\n  private sendLogToRenderer(projectId: string, logEntry: LogEntry): void {\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('logs:newEntry', {\n        projectId,\n        logEntry\n      })\n    }\n  }\n\n  // 获取内存使用情况\n  getMemoryUsage(): { totalProjects: number; totalLogs: number; estimatedMemoryKB: number } {\n    let totalLogs = 0\n    let estimatedMemoryBytes = 0\n\n    for (const [projectId, logs] of this.logs) {\n      totalLogs += logs.length\n      \n      // 估算内存使用（粗略计算）\n      for (const log of logs) {\n        estimatedMemoryBytes += JSON.stringify(log).length * 2 // UTF-16 字符\n      }\n      estimatedMemoryBytes += projectId.length * 2\n    }\n\n    return {\n      totalProjects: this.logs.size,\n      totalLogs,\n      estimatedMemoryKB: Math.round(estimatedMemoryBytes / 1024)\n    }\n  }\n\n  // 清理过期项目的日志（当项目被删除时调用）\n  cleanupProjectLogs(projectId: string): void {\n    this.logs.delete(projectId)\n  }\n}","import { readFileSync, writeFileSync, existsSync } from 'fs'\nimport { join } from 'path'\nimport { app } from 'electron'\n\nexport interface AppConfig {\n  theme: 'light' | 'dark' | 'system'\n  autoStart: boolean\n  minimizeToTray: boolean\n  showNotifications: boolean\n  defaultPackageManager: 'npm' | 'pnpm' | 'yarn'\n  maxConcurrentProjects: number\n  windowBounds?: {\n    x: number\n    y: number\n    width: number\n    height: number\n  }\n  language: 'zh-CN' | 'en-US'\n  logLevel: 'info' | 'warn' | 'error'\n}\n\nconst DEFAULT_CONFIG: AppConfig = {\n  theme: 'system',\n  autoStart: false,\n  minimizeToTray: true,\n  showNotifications: true,\n  defaultPackageManager: 'npm',\n  maxConcurrentProjects: 5,\n  language: 'en-US',\n  logLevel: 'info'\n}\n\nexport class ConfigManager {\n  private configFilePath: string\n  private config: AppConfig\n\n  constructor() {\n    this.configFilePath = join(app.getPath('userData'), 'app-config.json')\n    this.config = this.loadConfig()\n  }\n\n  private loadConfig(): AppConfig {\n    try {\n      if (existsSync(this.configFilePath)) {\n        const data = readFileSync(this.configFilePath, 'utf-8')\n        const savedConfig = JSON.parse(data)\n        \n        // 合并默认配置和保存的配置，确保新增的配置项有默认值\n        return { ...DEFAULT_CONFIG, ...savedConfig }\n      } else {\n        this.saveConfig(DEFAULT_CONFIG)\n        return { ...DEFAULT_CONFIG }\n      }\n    } catch (error) {\n      console.error('Failed to load config:', error)\n      return { ...DEFAULT_CONFIG }\n    }\n  }\n\n  private saveConfig(config: AppConfig): void {\n    try {\n      writeFileSync(this.configFilePath, JSON.stringify(config, null, 2))\n    } catch (error) {\n      console.error('Failed to save config:', error)\n    }\n  }\n\n  getConfig(): AppConfig {\n    return { ...this.config }\n  }\n\n  updateConfig(updates: Partial<AppConfig>): AppConfig {\n    this.config = { ...this.config, ...updates }\n    this.saveConfig(this.config)\n    return { ...this.config }\n  }\n\n  resetConfig(): AppConfig {\n    this.config = { ...DEFAULT_CONFIG }\n    this.saveConfig(this.config)\n    return { ...this.config }\n  }\n\n  // 获取特定配置项\n  getTheme(): AppConfig['theme'] {\n    return this.config.theme\n  }\n\n  getDefaultPackageManager(): AppConfig['defaultPackageManager'] {\n    return this.config.defaultPackageManager\n  }\n\n  getMaxConcurrentProjects(): number {\n    return this.config.maxConcurrentProjects\n  }\n\n  getLanguage(): AppConfig['language'] {\n    return this.config.language\n  }\n\n  // 设置特定配置项\n  setTheme(theme: AppConfig['theme']): void {\n    this.updateConfig({ theme })\n  }\n\n  setDefaultPackageManager(packageManager: AppConfig['defaultPackageManager']): void {\n    this.updateConfig({ defaultPackageManager: packageManager })\n  }\n\n  setWindowBounds(bounds: AppConfig['windowBounds']): void {\n    this.updateConfig({ windowBounds: bounds })\n  }\n\n  setLanguage(language: AppConfig['language']): void {\n    this.updateConfig({ language })\n  }\n\n  // 验证配置\n  validateConfig(config: Partial<AppConfig>): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (config.theme && !['light', 'dark', 'system'].includes(config.theme)) {\n      errors.push('Invalid theme value')\n    }\n\n    if (config.defaultPackageManager && !['npm', 'pnpm', 'yarn'].includes(config.defaultPackageManager)) {\n      errors.push('Invalid package manager')\n    }\n\n    if (config.maxConcurrentProjects && (config.maxConcurrentProjects < 1 || config.maxConcurrentProjects > 20)) {\n      errors.push('Max concurrent projects must be between 1 and 20')\n    }\n\n    if (config.language && !['zh-CN', 'en-US'].includes(config.language)) {\n      errors.push('Invalid language')\n    }\n\n    if (config.logLevel && !['info', 'warn', 'error'].includes(config.logLevel)) {\n      errors.push('Invalid log level')\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  // 导出配置\n  exportConfig(): string {\n    return JSON.stringify(this.config, null, 2)\n  }\n\n  // 导入配置\n  importConfig(configJson: string): { success: boolean; error?: string } {\n    try {\n      const importedConfig = JSON.parse(configJson)\n      const validation = this.validateConfig(importedConfig)\n      \n      if (!validation.valid) {\n        return {\n          success: false,\n          error: `Invalid configuration: ${validation.errors.join(', ')}`\n        }\n      }\n\n      this.config = { ...DEFAULT_CONFIG, ...importedConfig }\n      this.saveConfig(this.config)\n      \n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Invalid JSON format'\n      }\n    }\n  }\n}","import { app, BrowserWindow, ipcMain, dialog, shell } from 'electron'\nimport { join } from 'path'\nimport { ProjectManager } from './services/ProjectManager'\nimport { ProcessManager } from './services/ProcessManager'\nimport { LogManager } from './services/LogManager'\nimport { ConfigManager } from './services/ConfigManager'\n\n// 服务实例\nlet projectManager: ProjectManager\nlet processManager: ProcessManager\nlet logManager: LogManager\nlet configManager: ConfigManager\n\n// 主窗口\nlet mainWindow: BrowserWindow | null = null\n\nconst isDev = process.env.NODE_ENV === 'development'\n\nfunction createWindow() {\n  // 获取窗口配置\n  const config = configManager ? configManager.getConfig() : null\n  \n  mainWindow = new BrowserWindow({\n    width: config?.windowBounds?.width || 1200,\n    height: config?.windowBounds?.height || 800,\n    x: config?.windowBounds?.x,\n    y: config?.windowBounds?.y,\n    minWidth: 800,\n    minHeight: 600,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: join(__dirname, 'preload.js')\n    },\n    titleBarStyle: 'hiddenInset',\n    show: false\n  })\n\n  // 加载应用\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:5173')\n    mainWindow.webContents.openDevTools()\n  } else {\n    mainWindow.loadFile(join(__dirname, '../dist/index.html'))\n  }\n\n  // 窗口准备好后显示\n  mainWindow.once('ready-to-show', () => {\n    mainWindow?.show()\n  })\n\n  // 保存窗口位置和大小\n  mainWindow.on('close', () => {\n    if (mainWindow && configManager) {\n      const bounds = mainWindow.getBounds()\n      configManager.updateConfig({\n        windowBounds: bounds\n      })\n    }\n  })\n\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n}\n\n// 初始化服务\nfunction initializeServices() {\n  configManager = new ConfigManager()\n  projectManager = new ProjectManager()\n  logManager = new LogManager()\n  processManager = new ProcessManager(logManager)\n  \n  // 设置 URL 检测回调\n  processManager.setUrlDetectedCallback((projectId: string, url: string, port?: number) => {\n    console.log(`[Main] URL detected for project ${projectId}: ${url}`)\n    projectManager.updateProject(projectId, { \n      url: url,\n      port: port \n    })\n  })\n  \n  // 设置项目状态变更回调\n  processManager.setProjectStatusChangeCallback((projectId: string, status: 'running' | 'stopped') => {\n    console.log(`[Main] Project status change for ${projectId}: ${status}`)\n    if (status === 'stopped') {\n      projectManager.updateProject(projectId, { \n        status: 'stopped',\n        pid: undefined,\n        url: undefined,\n        port: undefined\n      })\n    }\n  })\n  \n  // 应用启动时重置所有项目状态为停止状态\n  // 因为应用重启后，之前运行的进程已经不在ProcessManager的管理范围内\n  projectManager.resetAllProjectsToStopped()\n}\n\n// 设置 IPC 处理器\nfunction setupIpcHandlers() {\n  // 项目管理\n  ipcMain.handle('projects:getAll', () => projectManager.getAllProjects())\n  ipcMain.handle('projects:create', (_, projectData) => projectManager.createProject(projectData))\n  ipcMain.handle('projects:update', (_, id, updates) => projectManager.updateProject(id, updates))\n  ipcMain.handle('projects:delete', (_, id) => projectManager.deleteProject(id))\n  ipcMain.handle('projects:getRunning', () => processManager.getRunningProjects())\n\n  // 项目控制\n  ipcMain.handle('projects:start', async (_, id) => {\n    const project = projectManager.getProject(id)\n    if (!project) return { success: false, error: 'Project not found' }\n    \n    const result = await processManager.startProject(project)\n    if (result.success) {\n      projectManager.updateProject(id, { \n        status: 'running', \n        pid: result.pid \n      })\n    }\n    return result\n  })\n\n  ipcMain.handle('projects:stop', async (_, id) => {\n    console.log('[IPC] projects:stop called for id:', id)\n    const success = await processManager.stopProject(id)\n    console.log('[IPC] processManager.stopProject result:', success)\n    \n    if (success) {\n      console.log('[IPC] Updating project status to stopped')\n      projectManager.updateProject(id, { \n        status: 'stopped', \n        pid: undefined \n      })\n      console.log('[IPC] Project status updated successfully')\n    } else {\n      console.log('[IPC] Failed to stop project, not updating status')\n    }\n    \n    console.log('[IPC] Returning success:', success)\n    return success\n  })\n\n  ipcMain.handle('projects:getStatus', (_, id) => {\n    const project = projectManager.getProject(id)\n    return project ? project.status : 'stopped'\n  })\n\n  // 日志管理\n  ipcMain.handle('logs:getMemoryLogs', (_, projectId) => logManager.getMemoryLogs(projectId))\n  ipcMain.handle('logs:clearAll', () => logManager.clearAllLogs())\n  ipcMain.handle('logs:clear', (_, projectId) => logManager.clearProjectLogs(projectId))\n\n  // 配置管理\n  ipcMain.handle('config:get', () => configManager.getConfig())\n  ipcMain.handle('config:update', (_, updates) => configManager.updateConfig(updates))\n  ipcMain.handle('config:reset', () => configManager.resetConfig())\n\n  // 文件对话框\n  ipcMain.handle('dialog:selectFolder', async () => {\n    if (!mainWindow) return null\n    \n    const result = await dialog.showOpenDialog(mainWindow, {\n      properties: ['openDirectory'],\n      title: '选择项目文件夹'\n    })\n    \n    return result.canceled ? null : result.filePaths[0]\n  })\n\n  // 打开文件夹\n  ipcMain.handle('system:openFolder', async (_, folderPath) => {\n    try {\n      await shell.openPath(folderPath)\n      return { success: true }\n    } catch (error) {\n      console.error('Failed to open folder:', error)\n      return { success: false, error: error instanceof Error ? error.message : String(error) }\n    }\n  })\n}\n\n// 应用事件\napp.whenReady().then(() => {\n  initializeServices()\n  setupIpcHandlers()\n  createWindow()\n\n  // 在窗口创建后设置日志管理器的主窗口引用\n  if (mainWindow && logManager) {\n    logManager.setMainWindow(mainWindow)\n  }\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  // 停止所有运行中的项目\n  if (processManager) {\n    processManager.stopAllProjects()\n  }\n  \n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('before-quit', () => {\n  // 清理资源\n  if (processManager) {\n    processManager.stopAllProjects()\n  }\n})"],"names":["join","app","existsSync","readFileSync","writeFileSync","randomUUID","logManager","spawn","BrowserWindow","ipcMain","dialog","shell"],"mappings":"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"}